import { Command, Ctx, Hears, Start, Update } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { SceneContext, WizardContext } from 'telegraf/typings/scenes'

import { CommandsEnum } from '../enums/commands.enum'
import { SceneNamesEnum } from '../enums/scene-names.enum'

@Update()
export class TelegramUpdate {
    @Start()
    async onStart(@Ctx() ctx: Context): Promise<void> {
        await ctx.replyWithMarkdownV2(
            '–ü—Ä–∏–≤–µ—Ç\n–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é —Ä—è–¥–æ–ºü•≥\n–¢–µ–±–µ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä—Å–∞—ÖüéÆ\n\n–ü–æ–µ—Ö–∞–ª–∏?ü§®',
            {
                reply_markup: {
                    resize_keyboard: true,
                    keyboard: [[{ text: '–ü–æ–µ—Ö–∞–ª–∏' }]],
                },
            },
        )
        await ctx.replyWithSticker(
            'CAACAgIAAxkBAAEFeP5i7M4T5jwO-E4v2jf_5g2LEhXiFwACJxgAApd54UvWARYS3sXfTykE',
        )
    }

    @Hears('–ü–æ–µ—Ö–∞–ª–∏')
    async onGo(@Ctx() ctx: WizardContext): Promise<void> {
        await ctx.scene.enter(SceneNamesEnum.CREATE_USER)
    }

    @Command(CommandsEnum.BAN_USER)
    async onBanUser(@Ctx() ctx: SceneContext): Promise<void> {
        await ctx.scene.enter(SceneNamesEnum.BAN_USER)
    }
}
